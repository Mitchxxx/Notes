
node('maven') {
   
    
   stage('clone') {
      git 'https://github.com/imranfawan/WebApp.git'
   }
  
   stage('build-compile-code') {
      sh "mvn clean install"
      sh "jar cvf webapp.war ."
   }
   
   stage('unit-test-report') {
      //archive "target/**/*"
      junit '**/target/surefire-reports/TEST-*.xml'
   }
   
   stage('deploy-nexus') {
       sh 'mvn --settings settings.xml deploy'
   }
   
}

node('docker') {

   stage('clone') {
      git 'https://github.com/imranfawan/WebApp.git'
   }
   
   stage('build-app-image') {
       
     sh "git rev-parse HEAD > .git/commit-id"
     def commit_id = readFile('.git/commit-id').trim()
     println commit_id
     def app = docker.build('imranawan/webserver', '.')
     // app.inside("-u root -e DOCKER_REMOTE_API='unix:///var/run/docker.sock'")
          
    docker.withRegistry('https://index.docker.io/v1/', 'docker-registry-id') {
    app.push 'master'
    app.push "${commit_id}" }       
       
   }
   
}

********************************************************************

node('maven') {
   //def mvnHome
   stage('clone') { // for display purposes
      // Get some code from a GitHub repository
      
      git 'https://github.com/imranfawan/WebApp.git'
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.           
    //  mvnHome = tool 'M3'
   }
  
   stage('build-compile-code') {
      // Run the maven build
    //     sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"
      sh "mvn clean install"
   }
   stage('junit-results') {
      junit '**/target/surefire-reports/TEST-*.xml'
      //archive 'target/*.jar'
   }
}



node('docker') {
   
   stage('clone') { 
     git 'https://github.com/imranfawan/WebApp.git'
   }
   
   stage('build-app-image') { 
      def app = docker.build('imranawan/webserver', '.')
   }
  
}

********************************************************************








node {
   def mvnHome
   def app
   def commit_id
   def container
   stage('Preparation') { 
      // Get some code from a GitHub repository
      git 'https://github.com/imranfawan/CucumberJavaSelenium.git'
         
      mvnHome = tool 'M3'
   }
  
   
   stage('build-code') {
      // Run the maven build
         sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean install -DskipTests"
         sh "git rev-parse HEAD > .git/commit-id"
         commit_id = readFile('.git/commit-id').trim()
         println commit_id
     //publish unit tests
    //  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/*.xml'])
    
   }
   
   stage('execute-tests') {
      // Execute tests. 
         sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore test -Dbrowser-firefox"
    
   }
   
 
  
   
   stage('Results') {
         junit 'target/junit-report/cucumber-*.xml'
    //     archive 'target/*.jar'
   }
   
}



node {

        git url: 'https://github.com/imranfawan/WebApp.git', branch: 'master'

          sh "git rev-parse HEAD > .git/commit-id"
          def commit_id = readFile('.git/commit-id').trim()
          println commit_id
          def app = docker.build('imranawan/webserver', '.')
         // app.inside("-u root -e DOCKER_REMOTE_API='unix:///var/run/docker.sock'")
     
          
            docker.withRegistry('https://hub.docker.com', 'docker-registry-id') {
             app.push 'master'
             app.push "${commit_id}" }
          
}
docker run -d --name jenkins -p 8888:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/jenkins:/var/lib/jenkins jenkins-alpine
docker run -d --name jenkins2 -p 8087:8080 -p 8086:50000 -v /var/run/docker.sock:/var/run/docker.sock jenkins-alpine















node {
   def mvnHome
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
      git 'https://github.com/jglick/simple-maven-project-with-tests.git'
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.
      mvnHome = tool 'M3'
   }
   stage('Build') {
      // Run the maven build
      if (isUnix()) {
         sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('Results') {
      junit '**/target/surefire-reports/TEST-*.xml'
      archive 'target/*.jar'
   }
}


withCredentials([string(credentialsId: 'mytoken', variable: 'TOKEN')]) {


DOCKER_OPTS="-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock"

DOCKER_OPTS="-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock"


node('jenkins-slave'){
    stage ('Functional Test') {
        checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '28bc5983-ff99-45e8-b949-1ea05477f2e9', url: 'https://uk-gitlab.almuk.santanderuk.corp/ab277474/santander_test_automation_framework.git']]])
        pom = readMavenPom file: 'pom.xml'
        pom.version
        //sh 'mvn clean compile -X -U -s settings.xml -Djavax.net.ssl.trustStore=nexus.jks -Djavax.net.ssl.trustStorePassword=changeit -Dmaven.test.skip=true'
        sh 'cd Automation-Framework_Mobile'
        sh 'ls'
        //pom = readMavenPom file: 'pom.xml'
        //pom.version
        //sh 'mvn cucumber-parallel-run:run -X -s settings.xml -Djavax.net.ssl.trustStore=nexus.jks -Djavax.net.ssl.trustStorePassword=changeit'
        //sh 'mvn cucumber-runner:run -Dappium.localPlatformName=ios'
    }
    //step([$class: 'CucumberReportPublisher', fileExcludePattern: '', fileIncludePattern: 'combined.json', ignoreFailedTests: true, jenkinsBasePath: '', jsonReportDirectory: 'target/cucumber/threads', missingFails: true, parallelTesting: false, pendingFails: true, skippedFails: true, undefinedFails: true])
}



node {
         docker.withRegistry('https://registry', 'docker-registry-credential-id') {

         checkout([$class: 'GitSCM', branches: [[name: 'jenkins']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-alm-projects', url: 'https://uk-gitlab.almuk.santanderuk.corp/ab278557/almuk-images.git']]])

        sh "git rev-parse HEAD > .git/commit-id"
        def commit_id = readFile('.git/commit-id').trim()
        println commit_id

        stage "build"
        def app = docker.build "registry', 'jenkins/Dockerfile'"

        stage "publish"
        app.push 'master'
        app.push "${commit_id}"
    }
}


node {
   def mvnHome
   stage('build') {

      docker.withRegistry('https://registry', 'docker-registry-id') {

      checkout([$class: 'GitSCM', branches: [[name: 'jenkins']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '-projects', url: 'https']]])

        sh "git rev-parse HEAD > .git/commit-id"
        def commit_id = readFile('.git/commit-id').trim()
        println commit_id
        def app = docker.build "imranawan/webserver', 'jenkins/Dockerfile'"

    //    stage "publish"

        app.push "${commit_id}"
        }

     }
}


node {
        
        stage "build" {
         docker.withRegistry('https://hub.docker.com', 'docker-registry-credential-id') {

         checkout([$class: 'GitSCM', branches: [[name: 'jenkins']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-alm-projects', url: 'https://github.com/imranfawan/WebApp.git']]])

          sh "git rev-parse HEAD > .git/commit-id"
          def commit_id = readFile('.git/commit-id').trim()
          println commit_id
          def app = docker.build "imranawan/webserver', 'Dockerfile'"
         }
         
        stage "publish" {
           app.push 'master'
          app.push "${commit_id}"
        }
    }
}


    stage('clone repo') {
          checkout([$class: 'GitSCM', branches: [[name: 'jenkins']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'auth-id', url: 'https://xx.git']]])
          sh "git rev-parse HEAD > .git/commit-id"
          def commit_id = readFile('.git/commit-id').trim()
          println commit_id
      }

      //build the jenkins image based on Dockerfile inside jenkins folder.
      stage('build') {
           def app = docker.build('registry.santanderuk.gs.corp:5000/alm/jenkins', 'jenkins')
      }

      //Simple test to see if image is built
      stage('Test image') {
              app.inside("-u root:root") {
                  echo 'Tests passed'
              }
      }

      stage ('publish') {
          docker.withRegistry('https://registry', 'docker-registry-credential-id') {
          app.push("${commit_id}")
          app.push("latest") }
      }

