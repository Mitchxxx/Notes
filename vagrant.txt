
1) Install vagrant and ansible on your host. 

2) Vagrantfile 

Once you have vagrant installed, create a Vagrantfile that creates a Ubuntu VM and uses ansible to provision the installation of docker via a playbook. 
   

After creating a ubuntu vm, notice the line 'docker-install.yml' which runs the 'docker-install.yml' playbook


(4) Launch VM

To launch the VM with ansible provisioning run 'vagrant up'

(5) Access VM

When launching the VM, vagrant creates a private key in the following default directory, which can be used to authenticate against the VM as the default vagrant user.

~/.vagrant.d/insecure_private_key

Execute the following ssh command to connect to the VM

 ssh -i ~/.vagrant.d/insecure_private_key vagrant@192.168.50.4


1.13.3-1


html_host_dir: /home/vagrant/html
docker_image_name: nginx
docker_container_name: nginx


**********************************************************
docker run --name nginx -d -v /home/vagrant/html:/usr/share/nginx/html -p 8080:80 nginx:latest


  config.vm.provision :file do |file|
    file.source      = '~/.html'
    file.destination = '/home/vagrant/html'
  end




   - name: logging in example
      docker_login:
        username: "my_username"
        password: "some_password"
        email: "my_email@example.com"
        reauthorize: yes
    - name: pulling images example
      docker_image:
        name: "{{ item }}"
      with_items: "{{ docker_hub_images }}"



 tasks:

  - name: pull the OS image
    docker_container:
      name: my-test-container
      image: python:2.7
      state: started
      command: ["sleep", "600"]



db.vm.network :forwarded_port, guest: 3306, host: 8206






 ssh -p 2222 -i /home/imran/.vagrant.d/insecure_private_key vagrant@127.0.0.1



- hosts: default
  become: true

  tasks:
    - name: ensure repository key is installed
      apt_key:
        id: "58118E89F3A912897C070ADBF76221572C52609D"
        keyserver: "hkp://p80.pool.sks-keyservers.net:80"
        state: present

    - name: ensure docker registry is available
      # For Ubuntu 14.04 LTS, use this repository:
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' state=present

    - name: ensure docker and dependencies are installed
      apt: name=docker-engine update_cache=yes

    # Uncomment the following to enable insecure registries with Docker
    #- name: ensure docker can use insecure registries in 10.11.0.0/16
    #  lineinfile: "dest=/etc/default/docker regexp=^DOCKER_OPTS line=DOCKER_OPTS='--insecure-registry 10.11.0.0/16'"



---
- name: Hello World!
  hosts: localhost

  tasks:

  - name: Hello World!
    shell: echo "Hi! Tower is working."






***********ANSIBLE************

<<<<<<< Updated upstream
playbook

---
- hosts: env.app-namge.tenants
  roles:
    - { role: role-name,
        tags: [ 'deployment', 'role-name' ] }
=======
# Some notes from installing VirtualBox on CentOS 7. 
# These exact steps haven't been tested, as I ran them in a different order when manually installing.

# Install dependencies
yum -y install gcc make patch  dkms qt libgomp
yum -y install kernel-headers kernel-devel fontforge binutils glibc-headers glibc-devel

# Install VirtualBox
cd /etc/yum.repos.d
wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo
yum install VirtualBox-5.0

# Check that you have the kernel sources downloaded for your running kernel version (if they don't match you might need to yum update and reboot)
ls /usr/src/kernels/
uname -r

# Build the VirtualBox kernel module 
export KERN_DIR=/usr/src/kernels/$(uname -r)
/sbin/rcvboxdrv setup

# Install Vagrant
yum -y install https://releases.hashicorp.com/vagrant/1.8.1/vagrant_1.8.1_x86_64.rpm

# Test Vagrant
mkdir ~/test-vagrant
cd ~/test-vagrant
vagrant init ubuntu/trusty64
vagrant up
>>>>>>> Stashed changes



s3 playbook

- name: set the backup path based on alm app to back up e.g confluece, jira etc
  set_fact:
    backup_path: "{% if app == 'confluence' %} '{{ docker_volumes }}/{{ confluence_docker_name }}/{{ confluence_tenant }}/' 
                  {% elif app == 'jira' %} '{{ docker_volumes }}/{{ jira_docker_service_name }}/{{ jira_tenant }}/' {% endif %}"

- name: set data stamp
  set_fact:
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%SZ') }}"


- name: concatanate the s3 app paths
  set_fact:
   s3_backup_path: "{{ s3_backup_path_root }}{{ app }}_{{ timestamp }}"


- name: Creates s3 backup directory
  file:
    path: "{{ s3_backup_path }}"
    state: directory
    mode: 0775
  become: yes
  become_method: sudo

- name: Copy the data to be backed up to the s3 backup folder
  command: "cp -r {{ backup_path }} {{ s3_backup_path}}"
  become: yes
  become_method: sudo

- easy_install:
    name: pip

- name: install boto
  pip: name=boto
  become: yes
  become_method: sudo


#- name: Simple PUT operation
#  s3:
   # aws_access_key: "{{aws_access_key_id}}"
   # aws_secret_key: "{{aws_secret_access_key}}"
#    bucket: alm1
#    object: "{{ app  }}-{{ timestamp }}"
#    src: "{{ s3_backup_path }}"
#    mode: put
#  become: yes
#  become_method: sudo 

#- name: navigate to s3 backup dir 
#  command: "cd {{ s3_backup_path_root }}"
    
- name: upload to s3
  shell: "s3cmd put -r {{ s3_backup_path }} s3://bucket-name/{{ app }}_{{ time_stamp }}"
  register: shell_result
    
- debug: 
   var: shell_result.stdout_lines


***********INSTALL VAGRANT ON UBUNTU***************

Disable secure boot in bios settings

sudo apt-get install virtualbox
sudo apt-get install vagrant


sudo apt-get install linux-headers-generic
sudo apt-get install virtualbox-dkms
sudo dpkg-reconfigure virtualbox-dkms

bsdtar curl libruby1.9.1 libyaml-0-2 ruby ruby-childprocess ruby-erubis
ruby-ffi ruby-i18n ruby-log4r ruby-net-scp ruby-net-ssh ruby1.9.1 vagrant

3. Deploy your development environment.

vagrant box add precise32 http://files.vagrantup.com/precise32.box
vagrant box add 'CentOS 7 x86_64' 'https://github.com/vezzoni/vagrant-vboxes/releases/download/0.0.1/centos-7-x86_64.box'

4. Start Vagrant.

vagrant init
NOTE: The “vagrant init” command sets up a Vagrant environment by placing a Vagrant file in the appropriate directory on your machine.



 sudo mokutil --disable-validation
 lsmod | grep vboxdrv
vboxdrv               454656  3 vboxnetadp,vboxnetflt,vboxpci

sudo apt install mokutil
sudo mokutil --disable-validation

vagrant init bento/centos-7.2
vagrant up

vagrant init ubuntu/xenial64

vagrant up



192.168.0.17
